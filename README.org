* f_date (aka Chimera)
* TODO Application
** TODO Databases
*** TODO Figure out the meaningful distinctions between Firebase realtime-database and cloud-firestore
** TODO iOS Support
Follow the guide here:
https://flutter.dev/docs/deployment/ios

Then setup firebase deps:
https://console.firebase.google.com/u/0/project/f-date/overview

** TODO Authentication 
*** TODO Authentication - Email - Done
*** TODO Authentication - Email+Link
*** TODO Authentication - Google
*** TODO Authentication - Apple 
This option must be available on iOS devices per Apple guidelines
*** TODO Authentication - Phone

This is a priority authentication method
** TODO Navigation
*** TODO Login Screen to Home - Done
*** TODO Bottom Tab bar navigation between main screens
** TODO Routes
*** TODO Quiz Page
**** TODO State Considerations
Will any user inputs need to be shared anywhere else?
*** TODO Component Design
-- What widgets should I use to accomplish this
- Column
  - Row ( Quiz Progress Bar ) -- indicates how far along the user is in the quiz
  - Container ( Holds main activity area)
    - Depeding on the type of question:
        - 1. Row ( Question Content (Draggable(?))) -- (potentially drag the question into a region of the screen correspoding to a type of response - eg. drag up for 'strong agree', left for 'disagree')
        - 1. Row ( Response Content (Clickable)) -- (click once to select, again to confirm. Or drag right)
        - 2. Center ( prompt/image appears and then selectable/draggable tiles appear that can be used to complete the question )
*** TODO Retreive json over http 
I have a json representing the Myers-Briggs test in Firebase. I have to pull this documents and inflate UI elements with its contents

*** TODO Application Settings Page
*** TODO User Statistics Page
*** TODO Matches Page
*** TODO Edit Profile Page

** TODO Models
*** TODO Think about your data needs and try to model some documents

** TODO CI/CD pipeline and production environment/deployment
** TODO Add Logging
[[https://flutter.dev/docs/testing/code-debugging#logging]]

* Gradle 
** TODO gradle.properties configuration - figure out what available options there are and what they mean!
#+begin_src 
org.gradle.jvmargs=-Xmx1536M
android.enableR8=true
android.useAndroidX=true
android.enableJetifier=true
#+end_src
* TODO Business
** TODO Figure out how to categorize personality traits and which ones to use
eg. a person could either be outgoing or introverted and that would represented as:
100% Introverted ---------x--- | --------x--- 100% Outgoing
The x's represent the amount a given person is of each 

Consider using netflix's categorizations of movies for personality 'taglines' 
eg. 'Dark, stylish, quirky, offbeat', etc.

This would make recommendation easier.

** TODO Get a business email and update product support email in firebase console
** TODO Research different types of personality assesments
Some examples would be:
1. Roarshach
2. Word Association
3. Personality quizes (meyer-briggs, what type of cat breed are you, etc.)
4. etc.

** TODO Figure out a logo/app-name
Resources:
- Look at books on symbology, specifically Literary Symbology

Considerations:
- RE Date
- Sum Date 
  - sounds nice
  - logo easy to pick
- dodo date -> not sure
- chimera (chimerism)
  - from the species of angler fish that reproduces by genetic chimerism
  - Sam approves
- dated
* Tools
** Firebase CLI
There's a lot you can do from the CLI - read about it:
[[https://firebase.google.com/docs/cli#linux]]

Push stuff to Firebase Firestore:
#+begin_src sh
firebase database:push /questionaire ./assets/quiz/mb-personality.json
#+end_src


** Flutter Utilities
** Generating sources
This project uses json-serializer to generate the necessary sources run this as needed:
#+begin_src sh
flutter packages pub run build_runner build --delete-conflicting-outputs
#+end_src

To watch for file changes run: 
#+begin_src sh
flutter pub run build_runner watch
#+end_src
The above is in a shell.nix hook which will run with direnv

** Flutter Commands
These commands are useful for common house-keeping
#+begin_src sh
flutter clean
#+end_src

#+begin_src sh
flutter packages pub upgrade
#+end_src

#+begin_src sh
flutter pub run build_runner build
#+end_src

Run an emulator from shell
#+begin_src sh
flutter emulators # get device id
flutter emulators --launch <device-id>
#+end_src
** Gradle
In case you're working with the android code directly - or the gradle build files remember to change into the ./android/ directory to make use of ./android/gradlew for build commands
Keep these commands in mind:
#+begin_src sh
cd ./android/
./gradlew build --refresh-dependencies
#+end_src
and 
#+begin_src sh
cd ./android/
./gradlew clean
#+end_src


** SHA1/SHA256 Keys
To obtain these keys for your application run the following:
#+begin_src sh
keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android
#+end_src
Alternatively, you can do the same with gradle:
#+begin_src sh
cd ./android
./gradlew signingReport
#+end_src
** API Key - Android Device Verification
AIzaSyBoEriU7JU9sMr1vidvhF0ApSosaBtjWbs
* Application
** Authentication
Firebase - see the following for how things are setup 

[[https://firebase.flutter.dev/docs/overview/#initializing-flutterfire]]
[[https://firebase.flutter.dev/docs/auth/usage]]
** Design/UI
*** Font Considerations
Experimenting with the following:
- Hack
- Source Sans Pro
- Lato
- Open Sans

*** Color Theme
TBD

** Structure
*** api/json-parsers/
custom 'library' for convenience/conciseness of json decoding logic
*** api/json-models/
contains dart objects to be inflated by json
*** api/http-client.dart
use the =dio= package to make http-requests and store configuration here.
*** theme/
The styles.dart used for styling widgets
[[./lib/theme/theme.dart]]
*** services/
Web APIs and native interaction code
*** controllers/
Classes that act as messengers between the HTTP services and the widgets.
They're responsible for telling the UI what the models are and what to render given a response.
*** models/
Objects to be inflated by database documents
*** components/ + classes/ + widgets/
Custom widgets which are used in multiple screens (HOCs)
These provide organization, validation, and generally any other logic 
that doesn't concern state management or network requests
*** blocs/ 
A pattern to maximize separation of UI and Business Logic to make the application
more robust, platform-agnostic
**** BLoCs
Concern business objects and streams of data typically from http
**** BLoC Providers
Concern connecting the State of BLoCs accross pages and widgets

*** screens/ + views/ + pages/ + routes/
Primary screen file for a given view and a folder for it's associated components (./components)
**** match/
Logic concerning existing matches, eg. chatting and profile viewing

**** discover/
Logic concerning discovering new profiles and applying likes/dislikes

**** settings/
Logic concerning application settings and account settings for accessibility, payment managements, etc. (distinct from profile configuration)

**** profile/
Logic concerning various configurable settings for a user (tbd.)

**** graphs/
Logic concerning the display of various statistical elements regarding the user profile relative to other profiles eg. measurements about which pictures on their profile are most popular, how they compare to other profiles in terms of 'success', and comparisions about their group type (determined by questionaires)

**** questionaires/
Logic concerning the display of various personality quizes used in establishing/quantifying traits on a particular user profile. This metric is used in organizing and prioritizing potential matches, as well as providing the prompt mechanic (during conversation initiation) to provide tangentially meaningful, but common-point introductions between users of the same or similar group type.

* Business
** Goals
f_date is a dating application built in dart using the flutter ui framework. 
What makes it distinct from other dating applications at a high-level is that f_date seeks to automate tedious aspects of the process dating cycle. F_date seeks to accomplish this by using short-form questionaires when a user profile is initialized (15-20 questions) to establish a baseline personality attribute which is used to measure compatibility as well as to give the user something to reflect on (ie. when the result of a myers-briggs test is issued, quiz-takers often share their results with others, laude themselves on belonging to a superior type, -> they get excited about belonging to a group which is perceived to be, in some measure, exclusive).

Once a baseline is established, the user will be encouraged to take more assesments. This will be motivated by,
    1. Greater qunatitative information on existing membership within a group, or establishing a new group membership
    2. Shorter, more concise quiz format (includes pictures)
    3. Increased profile publicity on the platform (since more information is available)
    4. More data available to be reported on the /data screen

These assesments inform two algoriths (models) that will be responsible for organizing matches and generating prompts (ice-breakers) when a conversation is intiated after a match.

** Punchline
Automated ice-breakers, personality based matching, encouraged by the human desire to have a simple answer to a difficult, yet entertaining question: "who am I" - and resultantly, give similar people better chances to meet and an easier way to get to know one another.

* Personal Notes
** Database/Modeling Considerations
Current State:
Not sure - I don't know enough about databases to make an informed decision. However, based on some recent research, a graph based database might be a good fit. These are relatively new however and so it's unlikely I'll be able to to use them effectively.
There is currently no support for an API for any graph database for the latest stable dart release.
I'll likely use some placeholder until I have a better understanding of graph databases and where they stand in teh dart ecosystem.

** BLoC Providers

To pass the =State= between widgets and pages, we use =*_bloc_provider=. These classes provide (share state) from BLoC classes. Specifically, we create a /static/ =of= method on a provider class to allow children widgets to get the instance of the of the given provider. 

The =updateShouldNotify= method checks whether the value has changed, and the framework notifies widgets to rebuild where necessary. 
* Resources
** Programming
[[~/notes/dart-in-action/dart-in-action.pdf]]
[[~/notes/flutter_in_action/Flutter_in_Action.pdf]]



* Reference Snippets
** Firebase realtime-database example
#+begin_src dart :exports none
// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:async';
import 'dart:io' show Platform;

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_database/ui/firebase_animated_list.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final FirebaseApp app = await Firebase.initializeApp(
    name: 'db2',
    options: Platform.isIOS || Platform.isMacOS
        ? FirebaseOptions(
            appId: '1:297855924061:ios:c6de2b69b03a5be8',
            apiKey: 'AIzaSyD_shO5mfO9lhy2TVWhfo1VUmARKlG4suk',
            projectId: 'flutter-firebase-plugins',
            messagingSenderId: '297855924061',
            databaseURL: 'https://flutterfire-cd2f7.firebaseio.com',
          )
        : FirebaseOptions(
            appId: '1:297855924061:android:669871c998cc21bd',
            apiKey: 'AIzaSyD_shO5mfO9lhy2TVWhfo1VUmARKlG4suk',
            messagingSenderId: '297855924061',
            projectId: 'flutter-firebase-plugins',
            databaseURL: 'https://flutterfire-cd2f7.firebaseio.com',
          ),
  );
  runApp(MaterialApp(
    title: 'Flutter Database Example',
    home: MyHomePage(app: app),
  ));
}

class MyHomePage extends StatefulWidget {
  MyHomePage({this.app});
  final FirebaseApp app;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter;
  DatabaseReference _counterRef;
  DatabaseReference _messagesRef;
  StreamSubscription<Event> _counterSubscription;
  StreamSubscription<Event> _messagesSubscription;
  bool _anchorToBottom = false;

  String _kTestKey = 'Hello';
  String _kTestValue = 'world!';
  DatabaseError _error;

  @override
  void initState() {
    super.initState();
    // Demonstrates configuring to the database using a file
    _counterRef = FirebaseDatabase.instance.reference().child('counter');
    // Demonstrates configuring the database directly
    final FirebaseDatabase database = FirebaseDatabase(app: widget.app);
    _messagesRef = database.reference().child('messages');
    database.reference().child('counter').once().then((DataSnapshot snapshot) {
      print('Connected to second database and read ${snapshot.value}');
    });
    database.setPersistenceEnabled(true);
    database.setPersistenceCacheSizeBytes(10000000);
    _counterRef.keepSynced(true);
    _counterSubscription = _counterRef.onValue.listen((Event event) {
      setState(() {
        _error = null;
        _counter = event.snapshot.value ?? 0;
      });
    }, onError: (Object o) {
      final DatabaseError error = o;
      setState(() {
        _error = error;
      });
    });
    _messagesSubscription =
        _messagesRef.limitToLast(10).onChildAdded.listen((Event event) {
      print('Child added: ${event.snapshot.value}');
    }, onError: (Object o) {
      final DatabaseError error = o;
      print('Error: ${error.code} ${error.message}');
    });
  }

  @override
  void dispose() {
    super.dispose();
    _messagesSubscription.cancel();
    _counterSubscription.cancel();
  }

  Future<void> _increment() async {
    // Increment counter in transaction.
    final TransactionResult transactionResult =
        await _counterRef.runTransaction((MutableData mutableData) async {
      mutableData.value = (mutableData.value ?? 0) + 1;
      return mutableData;
    });

    if (transactionResult.committed) {
      _messagesRef.push().set(<String, String>{
        _kTestKey: '$_kTestValue ${transactionResult.dataSnapshot.value}'
      });
    } else {
      print('Transaction not committed.');
      if (transactionResult.error != null) {
        print(transactionResult.error.message);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Flutter Database Example'),
      ),
      body: Column(
        children: <Widget>[
          Flexible(
            child: Center(
              child: _error == null
                  ? Text(
                      'Button tapped $_counter time${_counter == 1 ? '' : 's'}.\n\n'
                      'This includes all devices, ever.',
                    )
                  : Text(
                      'Error retrieving button tap count:\n${_error.message}',
                    ),
            ),
          ),
          ListTile(
            leading: Checkbox(
              onChanged: (bool value) {
                setState(() {
                  _anchorToBottom = value;
                });
              },
              value: _anchorToBottom,
            ),
            title: const Text('Anchor to bottom'),
          ),
          Flexible(
            child: FirebaseAnimatedList(
              key: ValueKey<bool>(_anchorToBottom),
              query: _messagesRef,
              reverse: _anchorToBottom,
              sort: _anchorToBottom
                  ? (DataSnapshot a, DataSnapshot b) => b.key.compareTo(a.key)
                  : null,
              itemBuilder: (BuildContext context, DataSnapshot snapshot,
                  Animation<double> animation, int index) {
                return SizeTransition(
                  sizeFactor: animation,
                  child: ListTile(
                    trailing: IconButton(
                      onPressed: () =>
                          _messagesRef.child(snapshot.key).remove(),
                      icon: Icon(Icons.delete),
                    ),
                    title: Text(
                      "$index: ${snapshot.value.toString()}",
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _increment,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}
#+end_src
** Flutter complete reference
[[https://fluttercompletereference.com/resources?code=cloudfirestore]]
** Flutter 2.0 Navigation
#+begin_src dart :exports none


Future<void> main() async {
  // Avoid errors caused by flutter upgrade.
  WidgetsFlutterBinding.ensureInitialized();

  // TODO: Implement host specific ui options
  if (kIsWeb) {
    // running on the web!
  } else {
    // NOT running on the web! You can check for additional platforms here.

  }
  runApp(App());
}

// TODO! Initialize Firebase
class App extends StatelessWidget {
  final Future<FirebaseApp> _initialization = Firebase.initializeApp();

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: _initialization,
      builder: (context, snapshot) {
        // check for errors in initialization
        if (snapshot.hasError) {
          // Placeholder
          return Text(
            'Something went wrong with firebase init!',
            style: Theme.of(context).textTheme.headline2,
          );
        }

        // Show application once complete
        if (snapshot.connectionState == ConnectionState.done) {
          return BooksApp();
        }

        // Load in the meantime
        return CircularProgressIndicator();
      },
    );
  }
}

class PlatformCheck extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        home: Scaffold(
            appBar: AppBar(title: Text('Detect Device is Android or iOS')),
            body: Center(child: detectPlatform())));
  }
}

class Book {
  final String title;
  final String author;
  Book(this.title, this.author);
}

class BooksApp extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _BooksAppState();
}

class _BooksAppState extends State<BooksApp> {
  // Todo move this out
  BookRouterDelegate _routerDelegate = BookRouterDelegate();
  BookRouteInformationParser _routeInformationParser =
      BookRouteInformationParser();

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      title: 'Books App',
      routerDelegate: _routerDelegate,
      routeInformationParser: _routeInformationParser,
    );
  }
}

class BookRouteInformationParser extends RouteInformationParser<BookRoutePath> {
  @override
  Future<BookRoutePath> parseRouteInformation(
      RouteInformation routeInformation) async {
    final uri = Uri.parse(routeInformation.location);
    // handle '/'
    if (uri.pathSegments.length == 0) {
      return BookRoutePath.home();
    }

    // handle '/book/:id'
    if (uri.pathSegments.length == 2) {
      if (uri.pathSegments[0] != 'book') return BookRoutePath.unknown();
      var remaining = uri.pathSegments[1];
      var id = int.tryParse(remaining);
      if (id == null) return BookRoutePath.unknown();
      return BookRoutePath.details(id);
    }

    // handle unknown routes
    return BookRoutePath.unknown();
  }

  @override
  RouteInformation restoreRouteInformation(BookRoutePath path) {
    // TODO: Replace with switch
    if (path.isUnknown) {
      return RouteInformation(location: '/404');
    }

    if (path.isHomePage) {
      return RouteInformation(location: '/');
    }

    if (path.isDetailsPage) {
      return RouteInformation(location: '/books/${path.id}');
    }

    return null;
  }
}

class BookRouterDelegate extends RouterDelegate<BookRoutePath>
    with ChangeNotifier, PopNavigatorRouterDelegateMixin<BookRoutePath> {
  final GlobalKey<NavigatorState> navigatorKey;

  Book _selectedBook;
  bool show404 = false;

  List<Book> books = [
    Book('Stranger in a Strange Land', 'Robert A. Heinlein'),
    Book('Foundation', 'Isaac Asimov'),
    Book('Fahrenheit 451', 'Ray Bradbury'),
  ];

  // call default constructor and initalize navigatorKey as an instance of GlobalKey
  BookRouterDelegate() : navigatorKey = GlobalKey<NavigatorState>();

  BookRoutePath get currentConfiguration {
    if (show404) {
      return BookRoutePath.unknown();
    }
    return _selectedBook == null
        ? BookRoutePath.home()
        : BookRoutePath.details(books.indexOf(_selectedBook));
  }

  @override
  Widget build(BuildContext context) {
    return Navigator(
      key: navigatorKey,
      pages: [
        MaterialPage(
          key: ValueKey('HomePage'),
          child: 
           Layout(
            views: [
              Login(title: 'test',),
              // Text('Match: Hack sample BodyText1',
              //     style: Theme.of(context).textTheme.bodyText1),
              Text('Profile: Lato sample headline6',
                  style: Theme.of(context).textTheme.headline6),
              Text('Quiz: headline 1',
                  style: Theme.of(context).textTheme.headline1),
              Text('Settings: subtitle 2',
                  style: Theme.of(context).textTheme.subtitle2),
              Text('Messages', style: Theme.of(context).textTheme.headline6),
            ],
          ),
          // child: BooksListScreen(
          //   books: books,
          //   onTapped: _handleBookTapped,
          // ),
        ),
        if (show404)
          MaterialPage(
            key: ValueKey('UnknownPage'),
            child: UnknownScreen(),
          )
        else if (_selectedBook != null)
          BookDetailsPage(book: _selectedBook)
      ],
      onPopPage: (route, result) {
        if (!route.didPop(result)) {
          return false;
        }

        // update the list of pages by setting _selectedBook to null
        _selectedBook = null;
        show404 = false;
        notifyListeners();
        return true;
      },
    );
  }

  @override
  Future<void> setNewRoutePath(BookRoutePath path) async {
    if (path.isUnknown) {
      _selectedBook = null;
      show404 = true;
      return;
    }

    if (path.isDetailsPage) {
      if (path.id < 0 || path.id > books.length - 1) {
        show404 = true;
        return;
      }

      _selectedBook = books[path.id];
    } else {
      _selectedBook = null;
    }
    show404 = false;
  }

  void _handleBookTapped(Book book) {
    _selectedBook = book;
    notifyListeners();
  }
}

class BookDetailsPage extends Page {
  final Book book;

  BookDetailsPage({
    this.book,
  }) : super(key: ValueKey(book));

  Route createRoute(BuildContext context) {
    return MaterialPageRoute(
      settings: this,
      builder: (BuildContext context) {
        return BookDetailsScreen(book: book);
      },
    );
  }
}

class BookRoutePath {
  final int id;
  final bool isUnknown;

  BookRoutePath.home()
      : id = null,
        isUnknown = false;

  BookRoutePath.details(this.id) : isUnknown = false;

  BookRoutePath.unknown()
      : id = null,
        isUnknown = true;

  bool get isHomePage => id == null;
  bool get isDetailsPage => id != null;
}

class BooksListScreen extends StatelessWidget {
  final List<Book> books;
  final ValueChanged<Book> onTapped;

  BooksListScreen({
    @required this.books,
    @required this.onTapped,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: ListView(
        children: [
          for (var book in books)
            ListTile(
              title: Text(book.title),
              subtitle: Text(book.author),
              onTap: () => onTapped(book),
            )
        ],
      ),
    );
  }
}

class BookDetailsScreen extends StatelessWidget {
  final Book book;

  BookDetailsScreen({
    @required this.book,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (book != null) ...[
              Text(
                book.title,
                style: Theme.of(context).textTheme.headline6,
              ),
              Text(
                book.author,
                style: Theme.of(context).textTheme.subtitle1,
              ),
            ],
          ],
        ),
      ),
    );
  }
}

class UnknownScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: Center(
        child: Text('404!'),
      ),
    );
  }
}

// void main() {
//   WidgetsFlutterBinding.ensureInitialized();
//   // AppSettings settings = AppSettings();
//   SystemChrome.setPreferredOrientations(
//           [DeviceOrientation.portraitUp, DeviceOrientation.portraitDown])
//       .then((_) => runApp(FDate(
//           // settings: settings
//           )));
// }
#+end_src

*** Example Controller
#+begin_src dart

import 'package:flutter/material.dart';
// import 'package:shared/shared.dart';

class TodoPage extends StatefulWidget {
  final TodoController controller;

  const TodoPage({Key key, this.controller}) : super(key: key);

  @override
  _TodoPageState createState() => _TodoPageState();
}

class _TodoPageState extends State<TodoPage> {
  List<Todo> todos;
  bool isLoading = false;

  void _getTodos() async {
    var newTodos = await widget.controller.fetchTodos();
    setState(() {
      todos = newTodos;
    });
  }

  void updateTodo(Todo todoItem, bool isCompleted) async {
    await widget.controller.updateTodo(todoItem, isCompleted);
    setState(() {});
  }

  void initState() {
    super.initState();
    widget.controller.onSync.listen((bool syncState) => setState(() {
          isLoading = syncState;
        }));
  }

  Widget get body => isLoading
      ? CircularProgressIndicator()
      : ListView.builder(
          key: Key('list-view'),
          itemCount: todos != null ? todos.length : 1,
          itemBuilder: (ctx, idx) {
            if (todos != null) {
              return CheckboxListTile(
                key: ValueKey("todo-$idx"),
                onChanged: (bool val) => updateTodo(todos[idx], val),
                value: todos[idx].completed,
                title: Text(todos[idx].title),
                subtitle: Text(
                  "todo num: $idx",
                  key: ValueKey("todo-$idx-subtitle"),
                ),
              );
            } else {
              return Text("Tap button to fetch todos");
            }
          });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('HTTP Todos'),
        actions: <Widget>[
          Container(
            child: Padding(
              padding: const EdgeInsets.only(right: 16.0),
              child: Text(
                widget.controller.getCompletedTodos().toString(),
                key: ValueKey("counter"),
                style: Theme.of(context).textTheme.display2,
              ),
            ),
          ),
        ],
      ),
      body: Center(child: body),
      floatingActionButton: FloatingActionButton(
        key: Key("get-todos-button"),
        onPressed: () => _getTodos(),
        child: Icon(Icons.add),
      ),
    );
  }
}
#+end_src

*** Example Validation Class for a given Widget
#+begin_src dart
import 'dart:async';

class Validators {
  final validateEmail =
      StreamTransformer<String, String>.fromHandlers(handleData: (email, sink) {
    if (email.contains('@') && email.contains('.')) {
      sink.add(email);
    } else if (email.length > 0) {
      sink.addError('Enter a valid email');
    }
  });

  final validatePassword = StreamTransformer<String, String>.fromHandlers(
      handleData: (password, sink) {
    if (password.length >= 6) {
      sink.add(password);
    } else if (password.length > 0) {
      sink.addError('Password needs to be at least 6 characters');
    }
  });

}
#+end_src

*** Example HTTP processing with JSON
A services implementation for working with todo objects:
#+begin_src dart
import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:http/http.dart';
import 'package:shared/shared.dart';

class HttpServices implements Services {
  Client client = Client();

  Future<List<Todo>> getTodos() async {
    final response =
    await client.get('https://jsonplaceholder.typicode.com/todos?userId=1');

    if (response.statusCode == 200) {
      var all = AllTodos.fromJson(json.decode(response.body));
      return all.todos;
    } else {
      throw Exception('Failed to load todos ');
    }
  }

  @override
  Future addTodo() {
    // TODO: implement addTodo
    return null;
  }

  @override
  Future<Todo> updateTodo(Todo todo) async {
    // post todo
    return todo;
  }
}

class FirebaseServices implements Services {
  @override
  Future addTodo() {
    return null;
  }

  @override
  Future<List<Todo>> getTodos() async {
    QuerySnapshot snapshot =
    await Firestore.instance.collection("todos").getDocuments();
    AllTodos todos = AllTodos.fromSnapshot(snapshot);
    return todos.todos;
  }

  @override
  Future<Todo> updateTodo(Todo todo) {
    // TODO: implement updateTodo
    return null;
  }
}
#+end_src

*** Decoding Nested Json
https://github.com/TomerPacific/MediumArticles/tree/master/serialization_example
#+begin_src dart
import 'package:serialization_example/models/doughnut.dart';

class DoughnutList {
  final List<Doughnut> doughnuts;

  DoughnutList(this.doughnuts);

  DoughnutList.fromJson(Map<String, dynamic> json)
  : doughnuts = json['doughnuts'] != null ? List<Doughnut>.from(json['doughnuts']) : null;

  Map<String, dynamic> toJson()  =>
  {
    'doughnuts': doughnuts,
  };

}

// ... elsewhere
Map<String, dynamic> decodedDoughnuts = jsonDecode(encodedJson);
List<dynamic> decodedJson =  decodedDoughnuts['doughnuts'];
decodedJson.map((elem) => jsonDecode(elem));

#+end_src
